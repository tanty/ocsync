commit 8a3e6176308da97a540423abd4c670defb4cac18
Author: Olivier Goffart <ogoffart@woboq.com>
Date:   Thu Nov 14 18:55:39 2013 +0100

    Don't put csync_owncloud in a plugin.
    
    It is now statically linked

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5904a8f..ebb5bfd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -58,7 +58,6 @@ if (MEM_NULL_TESTS)
 endif (MEM_NULL_TESTS)
 
 add_subdirectory(src)
-add_subdirectory(modules)
 add_subdirectory(config)
 add_subdirectory(doc)
 
diff --git a/modules/CMakeLists.txt b/modules/CMakeLists.txt
deleted file mode 100644
index 27ac8fb..0000000
--- a/modules/CMakeLists.txt
+++ /dev/null
@@ -1,49 +0,0 @@
-project(modules C)
-
-find_package(LibSSH 0.4.0)
-find_package(Neon 0.29.0)
-
-set(PLUGIN_VERSION_INSTALL_DIR "${PLUGIN_INSTALL_DIR}-${LIBRARY_SOVERSION}")
-
-set(MODULES_PUBLIC_INCLUDE_DIRS
-  ${CMAKE_CURRENT_SOURCE_DIR}
-  CACHE INTERNAL "modules include directories"
-)
-
-set(MODULES_PRIVATE_INCLUDE_DIRS
-  ${CSTDLIB_PUBLIC_INCLUDE_DIRS}
-  ${CSYNC_PUBLIC_INCLUDE_DIRS}
-  ${HTTPBF_PUBLIC_INCLUDE_DIRS}
-)
-
-set(OWNCLOUD_PLUGIN
-  ocsync_owncloud
-)
-
-include_directories(
-  ${MODULES_PUBLIC_INCLUDE_DIRS}
-  ${MODULES_PRIVATE_INCLUDE_DIRS}
-)
-
-if (NEON_FOUND)
-    include_directories( ${NEON_INCLUDE_DIRS} )
-    macro_add_plugin(${OWNCLOUD_PLUGIN} csync_owncloud.c csync_owncloud_recursive_propfind.c csync_owncloud_util.c)
-    target_link_libraries(${OWNCLOUD_PLUGIN} ${CSYNC_LIBRARY} ${NEON_LIBRARIES} ${HTTPBF_LIBRARY})
-
-    install(
-        TARGETS
-	${OWNCLOUD_PLUGIN}
-        DESTINATION
-        ${PLUGIN_VERSION_INSTALL_DIR}
-        )
-endif (NEON_FOUND)
-
-macro_add_plugin(ocsync_dummy csync_dummy.c)
-target_link_libraries(ocsync_dummy ${CSYNC_LIBRARY})
-
-# create test file as bad plugin for the vio testcase
-file(WRITE
-  ${CMAKE_CURRENT_BINARY_DIR}/ocsync_bad.so
-  "bad plugin"
-)
-
diff --git a/modules/csync_dummy.c b/modules/csync_dummy.c
deleted file mode 100644
index 8f82c67..0000000
--- a/modules/csync_dummy.c
+++ /dev/null
@@ -1,215 +0,0 @@
-/*
- * libcsync -- a library to sync a directory with another
- *
- * Copyright (c) 2008      by Andreas Schneider <mail@cynapses.org>
- *
- * This program is free software = NULL, you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation = NULL, either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY = NULL, without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program = NULL, if not, write to the Free Software Foundation,
- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
- */
-
-#include <errno.h>
-#include <stdio.h>
-#include <time.h>
-
-#include "c_lib.h"
-#include "vio/csync_vio_module.h"
-#include "vio/csync_vio_file_stat.h"
-
-#ifdef NDEBUG
-#define DEBUG_DUMMY(x)
-#else
-#define DEBUG_DUMMY(x) printf x
-#endif
-
-csync_vio_method_handle_t *mh = NULL;
-csync_vio_file_stat_t fs;
-
-/*
- * file functions
- */
-
-static csync_vio_method_handle_t *dummy_open(const char *durl, int flags, mode_t mode) {
-  (void) durl;
-  (void) flags;
-  (void) mode;
-
-  return &mh;
-}
-
-static csync_vio_method_handle_t *dummy_creat(const char *durl, mode_t mode) {
-  (void) durl;
-  (void) mode;
-
-  return &mh;
-}
-
-static int dummy_close(csync_vio_method_handle_t *fhandle) {
-  (void) fhandle;
-
-  return 0;
-}
-
-static ssize_t dummy_read(csync_vio_method_handle_t *fhandle, void *buf, size_t count) {
-  (void) fhandle;
-  (void) buf;
-  (void) count;
-
-  return 0;
-}
-
-static ssize_t dummy_write(csync_vio_method_handle_t *fhandle, const void *buf, size_t count) {
-  (void) fhandle;
-  (void) buf;
-  (void) count;
-
-  return 0;
-}
-
-static int64_t dummy_lseek(csync_vio_method_handle_t *fhandle, int64_t offset, int whence) {
-  (void) fhandle;
-  (void) offset;
-  (void) whence;
-
-  return 0;
-}
-
-/*
- * directory functions
- */
-
-static csync_vio_method_handle_t *dummy_opendir(const char *name) {
-  (void) name;
-
-  return &mh;
-}
-
-static int dummy_closedir(csync_vio_method_handle_t *dhandle) {
-  (void) dhandle;
-
-  return 0;
-}
-
-static csync_vio_file_stat_t *dummy_readdir(csync_vio_method_handle_t *dhandle) {
-  (void) dhandle;
-
-  return &fs;
-}
-
-static int dummy_mkdir(const char *uri, mode_t mode) {
-  (void) uri;
-  (void) mode;
-
-  return 0;
-}
-
-static int dummy_rmdir(const char *uri) {
-  (void) uri;
-
-  return 0;
-}
-
-static int dummy_stat(const char *uri, csync_vio_file_stat_t *buf) {
-  time_t now;
-
-  buf->name = c_basename(uri);
-  if (buf->name == NULL) {
-    csync_vio_file_stat_destroy(buf);
-    return -1;
-  }
-  buf->fields = CSYNC_VIO_FILE_STAT_FIELDS_NONE;
-
-  time(&now);
-  buf->mtime = now;
-  buf->fields |= CSYNC_VIO_FILE_STAT_FIELDS_MTIME;
-
-  return 0;
-}
-
-static int dummy_rename(const char *olduri, const char *newuri) {
-  (void) olduri;
-  (void) newuri;
-
-  return 0;
-}
-
-static int dummy_unlink(const char *uri) {
-  (void) uri;
-
-  return 0;
-}
-
-static int dummy_chmod(const char *uri, mode_t mode) {
-  (void) uri;
-  (void) mode;
-
-  return 0;
-}
-
-static int dummy_chown(const char *uri, uid_t owner, gid_t group) {
-  (void) uri;
-  (void) owner;
-  (void) group;
-
-  return 0;
-}
-
-static int dummy_utimes(const char *uri, const struct timeval *times) {
-  (void) uri;
-  (void) times;
-
-  return 0;
-}
-
-csync_vio_method_t dummy_method = {
-  .method_table_size = sizeof(csync_vio_method_t),
-  .open = dummy_open,
-  .creat = dummy_creat,
-  .close = dummy_close,
-  .read = dummy_read,
-  .write = dummy_write,
-  .lseek = dummy_lseek,
-  .opendir = dummy_opendir,
-  .closedir = dummy_closedir,
-  .readdir = dummy_readdir,
-  .mkdir = dummy_mkdir,
-  .rmdir = dummy_rmdir,
-  .stat = dummy_stat,
-  .rename = dummy_rename,
-  .unlink = dummy_unlink,
-  .chmod = dummy_chmod,
-  .chown = dummy_chown,
-  .utimes = dummy_utimes
-};
-
-csync_vio_method_t *vio_module_init(const char *method_name, const char *args,
-    csync_auth_callback cb, void *userdata) {
-  DEBUG_DUMMY(("csync_dummy - method_name: %s\n", method_name));
-  DEBUG_DUMMY(("csync_dummy - args: %s\n", args));
-
-  (void) method_name;
-  (void) args;
-  (void) cb;
-  (void) userdata;
-
-  mh = (void *) method_name;
-  fs.mtime = 42;
-
-  return &dummy_method;
-}
-
-void vio_module_shutdown(csync_vio_method_t *method) {
-  (void) method;
-}
-
-/* vim: set ts=8 sw=2 et cindent: */
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e2df779..76c304f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -12,6 +12,8 @@ else (CSYNC_STATIC_COMPILE_DIR)
     find_package(SQLite3 3.3.9 REQUIRED)
 endif()
 
+find_package(Neon 0.29.0 REQUIRED)
+
 
 set(CSYNC_PUBLIC_INCLUDE_DIRS
   ${CMAKE_CURRENT_BINARY_DIR}
@@ -23,6 +25,7 @@ set(CSYNC_PUBLIC_INCLUDE_DIRS
 set(CSYNC_PRIVATE_INCLUDE_DIRS
   ${SQLITE3_INCLUDE_DIRS}
   ${CSTDLIB_PUBLIC_INCLUDE_DIRS}
+  ${HTTPBF_PUBLIC_INCLUDE_DIRS}
   ${CMAKE_BINARY_DIR}
 )
 
@@ -36,6 +39,8 @@ set(CSYNC_LINK_LIBRARIES
   ${CSTDLIB_LIBRARY}
   ${CSYNC_REQUIRED_LIBRARIES}
   ${SQLITE3_LIBRARIES}
+  ${NEON_LIBRARIES}
+  ${HTTPBF_LIBRARY}
 )
 
 if(HAVE_ICONV AND WITH_ICONV)
@@ -71,6 +76,10 @@ set(csync_SRCS
   vio/csync_vio_handle.c
   vio/csync_vio_file_stat.c
   vio/csync_vio_local.c
+
+  csync_owncloud.c
+  csync_owncloud_recursive_propfind.c
+  csync_owncloud_util.c
 )
 
 configure_file(csync_version.h.in ${CMAKE_CURRENT_BINARY_DIR}/csync_version.h)
diff --git a/src/csync_private.h b/src/csync_private.h
index b758226..ab6c837 100644
--- a/src/csync_private.h
+++ b/src/csync_private.h
@@ -127,7 +127,6 @@ struct csync_s {
   } remote;
 
   struct {
-    void *handle;
     csync_vio_method_t *method;
     csync_vio_method_finish_fn finish_fn;
     csync_vio_capabilities_t capabilities;
diff --git a/src/vio/csync_vio.c b/src/vio/csync_vio.c
index 148d30c..976598e 100644
--- a/src/vio/csync_vio.c
+++ b/src/vio/csync_vio.c
@@ -56,112 +56,17 @@
 
 int csync_vio_init(CSYNC *ctx, const char *module, const char *args) {
 
-#if defined(_WIN32) || defined(__APPLE__) || defined(WITH_UNIT_TESTING)
-  csync_stat_t sb;
-#endif
-#if defined(_WIN32) || defined(WITH_UNIT_TESTING)
-  mbchar_t *mpath = NULL;
-#endif
-  char *path = NULL;
-  char *err = NULL;
   csync_vio_method_t *m = NULL;
   csync_vio_method_init_fn init_fn;
 
-#ifdef _WIN32
-  mbchar_t tbuf[MAX_PATH];
-  mbchar_t *pathBuf = NULL;
-  char *buf = NULL;
-  char *last_bslash = NULL;
-#endif
-
-#ifdef WITH_UNIT_TESTING
-    if (asprintf(&path, "%s/modules/ocsync_%s.%s", BINARYDIR, module, MODULE_EXTENSION) < 0) {
-        return -1;
-    }
-
-    mpath = c_utf8_to_locale(path);
-    if (_tstat(mpath, &sb) < 0) {
-        SAFE_FREE(path);
-    }
-    c_free_locale_string(mpath);
-#endif
-
-  if (path == NULL) {
-      if (asprintf(&path, "%s/ocsync_%s.%s", PLUGINDIR, module, MODULE_EXTENSION) < 0) {
-          return -1;
-      }
-  }
-
-#ifdef _WIN32
-  mpath = c_utf8_to_locale(path);
-  if (_tstat(mpath, &sb) < 0) {
-      SAFE_FREE(path);
-      /* Change the current working directory to read the module from a relative path. */
-      if( GetModuleFileNameW(NULL, tbuf, MAX_PATH) > 0 ) {
-          buf = c_utf8_from_locale(tbuf);
-          /* cut the trailing filename off */
-          if ((last_bslash = strrchr(buf, '\\')) != NULL) {
-              *last_bslash='\0';
-              pathBuf = c_utf8_to_locale(buf);
-
-              CSYNC_LOG(CSYNC_LOG_PRIORITY_DEBUG, "Win32: changing current working dir to %s", buf);
-              _wchdir(pathBuf);
-              c_free_locale_string(pathBuf);
-          }
-          c_free_locale_string(buf);
-
-          if (asprintf(&path, "modules/ocsync_%s.%s", module, MODULE_EXTENSION) < 0) {
-              return -1;
-          }
-      }
-  }
-  c_free_locale_string(mpath);
-#endif
-
-#ifdef __APPLE__
-  if (lstat(path, &sb) < 0) {
-    char path_tmp[1024];
-    char* path2 = NULL;
-    uint32_t size = sizeof(path_tmp);
-    SAFE_FREE(path);
-
-    if (_NSGetExecutablePath(path_tmp, &size) == 0)
-        printf("executable path is %s\n", path_tmp);
-
-    path2 = c_dirname(path_tmp);
-
-    if (asprintf(&path, "%s/../PlugIns/ocsync_%s.%s", path2, module, MODULE_EXTENSION) < 0) {
-      return -1;
-    }
-  }
-#endif
-
-  ctx->module.handle = dlopen(path, RTLD_LAZY);
-  SAFE_FREE(path);
-  if ((err = dlerror()) != NULL) {
-    (void) err;
-    /* Disable this log message as that tremendously confuses users. See log in csync.c */
-    /* CSYNC_LOG(CSYNC_LOG_PRIORITY_ERROR, "loading %s plugin failed - %s",
-     *        module, err); */
-    return -1;
-  }
-
-  *(void **) (&init_fn) = dlsym(ctx->module.handle, "vio_module_init");
-  if ((err = dlerror()) != NULL) {
-    CSYNC_LOG(CSYNC_LOG_PRIORITY_ERROR, "loading function failed - %s", err);
-    return -1;
-  }
-
-  *(void **)  (&ctx->module.finish_fn) = dlsym(ctx->module.handle,
-                                               "vio_module_shutdown");
-  if ((err = dlerror()) != NULL) {
-    CSYNC_LOG(CSYNC_LOG_PRIORITY_ERROR, "loading function failed - %s", err);
-    return -1;
-  }
+  /* The owncloud module used to be dynamically loaded, but now it's just statically linked */
+  extern csync_vio_method_t *vio_module_init(const char *method_name, const char *config_args, csync_auth_callback cb, void *userdata);
+  extern void vio_module_shutdown(csync_vio_method_t *);
+  init_fn = vio_module_init;
+  ctx->module.finish_fn = vio_module_shutdown;
 
   /* get the method struct */
-  m = (*init_fn)(module, args, csync_get_auth_callback(ctx),
-      csync_get_userdata(ctx));
+  m = init_fn(module, args, csync_get_auth_callback(ctx), csync_get_userdata(ctx));
   if (m == NULL) {
     CSYNC_LOG(CSYNC_LOG_PRIORITY_ERROR, "module %s returned a NULL method", module);
     return -1;
@@ -227,19 +132,13 @@ int csync_vio_init(CSYNC *ctx, const char *module, const char *args) {
 }
 
 void csync_vio_shutdown(CSYNC *ctx) {
-  if (ctx->module.handle != NULL) {
     /* shutdown the plugin */
     if (ctx->module.finish_fn != NULL) {
       (*ctx->module.finish_fn)(ctx->module.method);
     }
 
-    /* close the plugin */
-    dlclose(ctx->module.handle);
-    ctx->module.handle = NULL;
-
     ctx->module.method = NULL;
     ctx->module.finish_fn = NULL;
-  }
 }
 
 csync_vio_handle_t *csync_vio_open(CSYNC *ctx, const char *uri, int flags, mode_t mode) {
diff --git a/tests/vio_tests/check_vio.c b/tests/vio_tests/check_vio.c
index 0fb28bb..21df68f 100644
--- a/tests/vio_tests/check_vio.c
+++ b/tests/vio_tests/check_vio.c
@@ -79,38 +79,6 @@ static void teardown(void **state) {
     *state = NULL;
 }
 
-static void check_csync_vio_load(void **state)
-{
-    CSYNC *csync = *state;
-    int rc;
-
-    rc = csync_vio_init(csync, "owncloud", NULL);
-    assert_int_equal(rc, 0);
-
-    csync_vio_shutdown(csync);
-}
-
-static void check_csync_vio_load_wrong_proto(void **state)
-{
-    CSYNC *csync = *state;
-    int rc;
-
-    rc = csync_vio_init(csync, "wrong", NULL);
-    assert_int_equal(rc, -1);
-
-    csync_vio_shutdown(csync);
-}
-
-static void check_csync_vio_load_bad_plugin(void **state)
-{
-    CSYNC *csync = *state;
-    int rc;
-
-    rc = csync_vio_init(csync, "bad", NULL);
-    assert_int_equal(rc, -1);
-
-    csync_vio_shutdown(csync);
-}
 
 /*
  * Test directory function
@@ -549,9 +517,6 @@ static void check_csync_vio_utimes(void **state)
 int torture_run_tests(void)
 {
     const UnitTest tests[] = {
-        unit_test_setup_teardown(check_csync_vio_load, setup, teardown),
-        unit_test_setup_teardown(check_csync_vio_load_wrong_proto, setup, teardown),
-        unit_test_setup_teardown(check_csync_vio_load_bad_plugin, setup, teardown),
 
         unit_test_setup_teardown(check_csync_vio_mkdir, setup, teardown),
         unit_test_setup_teardown(check_csync_vio_mkdirs, setup, teardown),
